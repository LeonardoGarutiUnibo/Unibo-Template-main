
    <style>
        .fixed-overlay {
            position: fixed;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 50%;
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            display: none;
            z-index: 1000;
        }

        .fixed-overlay.active {
            display: block;
        }
        .main-content {
            margin-left: 270px;
            padding: 20px;
            width: calc(100% - 270px);
        }
        .container {
            max-width: 85%;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow:  0px 0px 20px rgba(0, 0, 0, 0.1);
        }
    </style>
<div class="main-content">
    <div class="container">
        <h1 class="mb-4 text-center">Gestione Utenti dei Team</h1>

        <div class="d-flex justify-content-center gap-3 mb-4" role="group">
            <button type="button" class="btn btn-outline-primary" onclick="showSection('users')">üë• Mostra Utenti</button>
            <button type="button" class="btn btn-outline-secondary" onclick="showSection('teams')">üßë‚Äçü§ù‚Äçüßë Mostra Team</button>
            <button class="btn btn-info" onclick="showSearchForm()">
                <i class="bi bi-search"></i> Ricerca 
            </button>
        </div>
        <div class="mb-3" id="searchModal" style="display:none;">
            <div class="input-group">
                <input type="text" class="form-control" id="searchInput" placeholder="Cerca per nome..." onkeyup="filter()" />
                <button class="btn btn-outline-secondary" onclick="hideSearchForm()">Chiudi</button>
            </div>
        </div>
        <div id="usersSection">
            <h4 style="padding-bottom:10px">Utenti</h4>
            <table id="usersTable" class="table table-bordered table-hover table-striped align-middle">
                <thead class="table-dark">
                    <tr>
                        <th style="cursor:pointer;" onclick="sortTable(0)">Nome &nbsp &#x25B2;&#x25BC;</th>
                        <th style="cursor:pointer;" onclick="sortTable(1)">Cognome &nbsp &#x25B2;&#x25BC;</th>
                        <th style="cursor:pointer;" onclick="sortTable(2)">Nickname &nbsp &#x25B2;&#x25BC;</th>
                        <th style="cursor:pointer;" onclick="sortTable(3)">Email &nbsp &#x25B2;&#x25BC;</th>
                        <th>Ruolo</th>
                        <th style="cursor:pointer;" onclick="sortTable(4)">Team &nbsp &#x25B2;&#x25BC;</th>
                        <th>Assegna Team</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>
                            <td>@user.NickName</td>
                            <td>@user.Email</td>
                            <td>@user.Role</td>

                            <!-- Select per cambiare team -->
                            @{
                                var teamName = "-- Nessun team --";
                                if (user.TeamId != null)
                                {
                                    foreach (var team in Model.TeamsWithUserCount)
                                    {
                                        if (team.TeamId == user.TeamId)
                                        {
                                            teamName = team.TeamName;
                                            break;
                                        }
                                    }
                                }
                            }
                            <td>@teamName</td>
                            <td>
                                <select class="form-select" id="teamSelect_@user.Id">
                                @if (user.TeamId == null)
                                {
                                    <option value="" selected>-- Nessun team --</option>
                                }
                                @foreach (var team in Model.TeamsWithUserCount)
                                {
                                    if (user.TeamId == team.TeamId)
                                    {
                                        <option value="@team.TeamId" selected>@team.TeamName</option>@: @team.TeamName
                                    }
                                    else
                                    {
                                        <option value="@team.TeamId">@team.TeamName</option>
                                    }
                                }
                            </select>
                                <button class="btn btn-sm btn-primary mt-1" onclick="saveUserTeam('@user.Id')">Salva</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div id="teamsSection" style="display: none;">
            <h4 style="padding-bottom:10px">Team</h4>
            <table id="teamsTable" class="table table-bordered table-hover table-striped align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Nome Team</th>
                        <th>Numero Utenti</th>
                        <th>Manager</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var team in Model.TeamsWithUserCount)
                    {
                        <tr>
                            <td>@team.TeamName</td>
                            <td>@team.UserCount</td>
                            <td>@team.ManagerName</td>
                            <td>
                                
                                <button class="btn btn-outline-info btn-sm" onclick="showTeamUsers('@team.TeamId')">üìÑ Dettagli</button>
                                <button class="btn btn-outline-success btn-sm" onclick="openAssignManagerModal('@team.TeamId')">üëë Assegna Manager</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="modal fade" id="teamUsersModal" tabindex="-1" aria-labelledby="teamUsersModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="teamUsersModalLabel">Utenti del Team</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
          </div>
          <div class="modal-body">
            <table class="table table-bordered table-hover table-striped align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Ruolo</th>
                        <th>Manager</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var member in Model.EnrichedTeamMembers)
                    {
                        <tr>
                            <td>@member.FirstName @member.LastName</td>
                            <td>@member.Email</td>
                            <td>@member.Role</td>
                            <td>@(member.IsManager ? "‚úîÔ∏è" : "")</td>
                        </tr>
                    }
                </tbody>
            </table>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
          </div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="assignManagerModal" tabindex="-1" aria-labelledby="assignManagerModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Assegna Team Manager</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
          </div>
          <div class="modal-body">
            <select id="availableUsers" class="form-select mb-3">
            </select>
            <button class="btn btn-primary" onclick="assignManager()">Assegna</button>
          </div>
        </div>
      </div>
    </div>
</div>
<script>
    let selectedTeamIdForManager = null;
    let sortDirection = {};
        async function openAssignManagerModal(teamId) {
            selectedTeamIdForManager = teamId;

            try {
                const response = await fetch(`/Example/TeamMembers/GetAvailableUsersForManager?teamId=${teamId}`, { cache: 'no-store' });
                if (!response.ok) throw new Error('Errore nel recupero utenti disponibili');

                const users = await response.json();
                const select = document.getElementById("availableUsers");
                select.innerHTML = "";

                users.forEach(user => {
                    const option = document.createElement("option");
                    option.value = user.id;
                    option.text = `${user.firstName} ${user.lastName} (${user.email})`;
                    select.appendChild(option);
                });

                const modal = new bootstrap.Modal(document.getElementById('assignManagerModal'));
                modal.show();
            } catch (error) {
                alert("Errore nel caricamento utenti: " + error.message);
            }
        }

        async function assignManager() {
            const userId = document.getElementById("availableUsers").value;

            try {
                const response = await fetch(`/Example/TeamMembers/AssignTeam`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: userId,
                        teamId: selectedTeamIdForManager,
                        isManager: true
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || "Errore nel salvataggio");
                }

                alert("Manager assegnato con successo!");
                location.reload();

            } catch (err) {
                alert("Errore: " + err.message);
            }
        }

        function showSection(section) {
            const users = document.getElementById("usersSection");
            const teams = document.getElementById("teamsSection");

            if (section === "users") {
                users.style.display = "block";
                teams.style.display = "none";
            } else {
                users.style.display = "none";
                teams.style.display = "block";
            }
        }

        async function showTeamUsers(teamId) {
            try {
                const response = await fetch(`/Example/TeamMembers/GetUsers?teamId=${teamId}`, { cache: 'no-store' });
                if (!response.ok) throw new Error('Errore nel recupero utenti');
                const users = await response.json();

                const tbody = document.querySelector("#teamUsersModal table tbody");
                tbody.innerHTML = "";

                users.forEach(user => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `
                        <td>${user.firstName} ${user.lastName}</td>
                        <td>${user.email}</td>
                        <td>${user.role}</td>
                        <td>${user.isManager ? "‚úîÔ∏è" : ""}</td>
                    `;
                    tbody.appendChild(tr);
                });
                const modal = new bootstrap.Modal(document.getElementById('teamUsersModal'));
                modal.show();

            } catch (error) {
                alert("Impossibile caricare gli utenti del team: " + error.message);
            }
        }

        async function saveUserTeam(userId) {
            console.log(userId)
            const select = document.getElementById(`teamSelect_${userId}`);
            const selectedTeamId = select.value;
            console.log(userId)
            try {
                const response = await fetch(`/Example/TeamMembers/AssignTeam`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: userId,
                        teamId: selectedTeamId,
                        isManager: false
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || "Errore nel salvataggio");
                }
                alert("Team aggiornato con successo!");
                location.reload();
            } catch (err) {
                alert("Errore durante il salvataggio: " + err.message);
            }
        }
        document.getElementById("userFormForm").addEventListener("submit", function(event) {
            const isAdminChecked = document.getElementById("isAdmin").checked;
            document.getElementById("roleField").value = isAdminChecked ? "Admin" : "User";
        });


    function showSearchForm() {
        document.getElementById("searchModal").style.display = "block";
    }
    function hideSearchForm() {
        const rows = document.querySelectorAll("tbody tr");
        rows.forEach(row => row.style.display = "");
        document.getElementById("searchModal").style.display = "none";
    }


    function filter() {
        const input = document.getElementById("searchInput").value.toLowerCase();

        const usersVisible = document.getElementById("usersSection").style.display !== "none";

        if (usersVisible) {
            filterUsers(input);
        } else {
            filterTeams(input);
        }
    }

    function filterUsers(input) {
        const rows = document.querySelectorAll("#usersTable tbody tr");

        rows.forEach(row => {
            let userName = row.cells[0].textContent.toLowerCase();
            let userSurname = row.cells[1].textContent.toLowerCase();
            let userNickname = row.cells[2].textContent.toLowerCase();
            let userEmail = row.cells[3].textContent.toLowerCase();
            let userRole = row.cells[4].textContent.toLowerCase();
            let teamName = row.cells[5].textContent.toLowerCase();

            if (
                userName.includes(input) ||
                userSurname.includes(input) ||
                userNickname.includes(input) ||
                userEmail.includes(input) ||
                userRole.includes(input) ||
                teamName.includes(input)
            ) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }

    function filterTeams(input) {
        const rows = document.querySelectorAll("#teamsTable tbody tr");

        rows.forEach(row => {
            let teamName = row.cells[0].textContent.toLowerCase();
            let managerName = row.cells[2].textContent.toLowerCase();

            if (
                teamName.includes(input) ||
                managerName.includes(input)
            ) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }

    function sortTable(colIndex) {
        const table = document.querySelector("table tbody");
        const rows = Array.from(table.querySelectorAll("tr"));

        sortDirection[colIndex] = !sortDirection[colIndex];

        rows.sort((a, b) => {
            let cellA = a.cells[colIndex].textContent.trim();
            let cellB = b.cells[colIndex].textContent.trim();
            if (cellA < cellB) return sortDirection[colIndex] ? -1 : 1;
            if (cellA > cellB) return sortDirection[colIndex] ? 1 : -1;
            return 0;
        });

        rows.forEach(row => table.appendChild(row));
    }

    </script>
