@model Template.Web.Areas.Example.Requests.UserIndexViewModel
<div class="main-content">
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Gestione Richieste</h2>

        <div class="d-flex justify-content-center gap-3 mb-4">
            <button class="btn btn-info" onclick="showSearchForm()">
                <i class="bi bi-search"></i> Ricerca Utenti
            </button>
        </div>

        <div class="mb-3" id="searchModal" style="display:none;">
            <div class="input-group">
                <input type="text" class="form-control" id="searchInput" placeholder="Cerca per nome..." onkeyup="filterUsers()" />
                <button class="btn btn-outline-secondary" onclick="hideSearchForm()">Chiudi</button>
            </div>
        </div>

        <table class="table table-bordered table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th style="cursor:pointer;" onclick="sortTable(0)">Utente &#x25B2;&#x25BC;</th>
                    <th style="cursor:pointer;" onclick="sortTable(1)">Data richiesta &#x25B2;&#x25BC;</th>
                    <th style="cursor:pointer;" onclick="sortTable(2)">Inizio &#x25B2;&#x25BC;</th>
                    <th style="cursor:pointer;" onclick="sortTable(3)">Fine &#x25B2;&#x25BC;</th>
                    <th style="cursor:pointer;" onclick="sortTable(4)">Tipo evento &#x25B2;&#x25BC;</th>
                    <th>Stato evento</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Absences != null && Model.Absences.Any())
                {
                    foreach (var absence in Model.Absences)
                    {
                        <tr>
                            <td>@absence.FullName</td>
                            <td>@absence.RequestDate.ToString("dd/MM/yyyy")</td>
                            <td>@absence.StartEventDate.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>@absence.EndEventDate.ToString("dd/MM/yyyy  HH:mm")</td>
                            <td>@absence.EventType</td>
                            <td>
                                <form method="post" asp-action="UpdateAbsenceState" asp-controller="Requests" asp-area="Example" class="d-flex align-items-center gap-1">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@absence.Id" />
                                    <select name="newState" class="form-select form-select-sm">
                                            @if (absence.EventState == "Approvato")
                                            {
                                                @:<option value="Approvato" selected>Approvato</option>
                                                @:<option value="Rifiutato">Rifiutato</option>
                                            }
                                            else if (absence.EventState == "Rifiutato")
                                            {
                                                @:<option value="Approvato">Approvato</option>
                                                @:<option value="Rifiutato" selected>Rifiutato</option>
                                            }
                                            else // se è Pending o qualunque altro valore iniziale
                                            {
                                                @:<option value="Pending" selected>Pending</option>
                                                @:<option value="Approvato">Approvato</option>
                                                @:<option value="Rifiutato">Rifiutato</option>
                                            }
                                        </select>
                                    <button type="submit" class="btn btn-outline-success btn-sm" title="Salva stato">Salva</button>
                                </form>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="7" class="text-center">Nessuna assenza trovata</td></tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script>
    function showSearchForm() {
        document.getElementById("searchModal").style.display = "block";
    }
    function hideSearchForm() {
        const rows = document.querySelectorAll("tbody tr");
        rows.forEach(row => row.style.display = "");
        document.getElementById("searchModal").style.display = "none";
    }
    function filterUsers() {
        const input = document.getElementById("searchInput").value.toLowerCase();
        const rows = document.querySelectorAll("tbody tr");

        rows.forEach(row => {
            const name = row.cells[0].textContent.toLowerCase();
            const requestDate = row.cells[1].textContent.toLowerCase();
            const eventType = row.cells[4].textContent.toLowerCase();  // qui ora è corretto

            let match = name.includes(input) || 
                        requestDate.includes(input) || 
                        eventType.includes(input);

            row.style.display = match ? "" : "none";
        });
    }

    let sortDirection = {};

    function sortTable(colIndex) {
        const table = document.querySelector("table tbody");
        const rows = Array.from(table.querySelectorAll("tr"));

        sortDirection[colIndex] = !sortDirection[colIndex];

        rows.sort((a, b) => {
            let cellA = a.cells[colIndex].textContent.trim();
            let cellB = b.cells[colIndex].textContent.trim();
            if (colIndex === 1 || colIndex === 2 || colIndex === 3) {
                cellA = parseItalianDateTime(cellA);
                cellB = parseItalianDateTime(cellB);
                return sortDirection[colIndex] ? cellA - cellB : cellB - cellA;
            }
            if (cellA < cellB) return sortDirection[colIndex] ? -1 : 1;
            if (cellA > cellB) return sortDirection[colIndex] ? 1 : -1;
            return 0;
        });

        rows.forEach(row => table.appendChild(row));
    }
    function parseItalianDateTime(dateStr) {
        if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateStr)) {
            const [d, m, y] = dateStr.split('/');
            return new Date(y, m - 1, d);
        }
        else if (/^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}$/.test(dateStr)) {
            const [datePart, timePart] = dateStr.split(' ');
            const [d, m, y] = datePart.split('/');
            const [hh, mm] = timePart.split(':');
            return new Date(y, m - 1, d, hh, mm);
        }
        return new Date(dateStr);
    }
</script>
<style>
        .fixed-overlay {
            position: fixed;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 50%;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            display: none;
            z-index: 999;
        }

        .form-container {
            text-align: center;
        }

        .fixed-overlay.active {
            display: block;
        }
        .fixed-overlay h2 {
            margin-bottom: 20px;
        }
        .main-content {
            margin-left: 270px;
            padding: 20px;
            width: calc(100% - 270px);
        }

    </style>