@model Template.Web.Areas.Example.Dashboard.PresenzeViewModel
<style>
    body {
        font-family: Arial, sans-serif;
        background: #f4f4f4;
        margin: 0;
        padding: 0;
        text-align: center;
    }

    .selected-cell {
        outline: 2px solid #0073e6;
    }
    .main-content {
        margin-left: 270px;
        padding: 20px;
        width: calc(100% - 270px);
    }

    .container {
        max-width: 80%;
        margin: auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: center;
        position: relative; 
    }

    th {
        background: #0073e6;
        color: white;
    }

    td:first-child {
        font-weight: bold;
        background: #e3f2fd;
        position: sticky;
        left: 0;
        z-index: 2;
    }

    .status {
        cursor: pointer;
        font-size: 22px;
        transition: 0.3s;
    }

    .status:hover {
        transform: scale(1.2);
    }

    .intera { background: #28a745; color: white; }
    .mezza { background: #ffc107; color: black; }
    .assente { background: #dc3545; color: white; }
    .smartworking { background: #17a2b8; color: white; }

    .table-wrapper {
        overflow-x: auto;
        max-width: 100%;
    }

    #popup {
        position: absolute;
        background: white;
        border: 1px solid #ccc;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        width: 300px;
        z-index: 100;
        display: none;
        font-size: 14px;
        text-align: left;
    }

    #popup label {
        display: block;
        margin-top: 10px;
        font-weight: 600;
    }

    #popup input[type="datetime-local"], 
    #popup select {
        width: 100%;
        padding: 6px 8px;
        margin-top: 4px;
        box-sizing: border-box;
        border-radius: 4px;
        border: 1px solid #aaa;
    }

    #popup button {
        margin-top: 12px;
        padding: 8px 14px;
        cursor: pointer;
        border-radius: 5px;
        border: none;
        font-weight: 600;
    }

    #popup button.save {
        background-color: #0073e6;
        color: white;
        margin-right: 8px;
    }

    #popup button.delete {
        background-color: #dc3545;
        color: white;
        margin-right: 8px;
    }

    #popup button.cancel {
        background-color: #ccc;
        color: black;
    }

    .legenda {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 12px;
        font-weight: bold;
    }

    .legenda div {
        padding: 6px 12px;
        border-radius: 4px;
    }
</style>

<div class="main-content">
    <div class="container">
        <h1>Gestione Presenze e Smart Working</h1>

        <form method="get">
            @Html.AntiForgeryToken()
            <label for="startMonth">Da mese:</label>
            <input type="month" id="startMonth" name="startMonth" value="@Model.StartMonth?.ToString("yyyy-MM")" />

            <label for="endMonth">A mese:</label>
            <input type="month" id="endMonth" name="endMonth" value="@Model.EndMonth?.ToString("yyyy-MM")" />

            <button type="submit">Filtra</button>
        </form>

        <div class="table-wrapper" style="margin-bottom: 40px;">
            <h2>Il tuo orario</h2>
            <table>
                <thead>
                    <tr>
                        <th>Dipendente</th>
                        @foreach (var day in Model.DaysInMonth)
                        {
                            <th>@DateTime.Parse(day).ToString("dd/MM")</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Model.CurrentUserSchedule.Name</td>
                        @foreach (var day in Model.DaysInMonth)
                        {
                            var status = Model.CurrentUserSchedule.Schedule.ContainsKey(day) ? Model.CurrentUserSchedule.Schedule[day] : "";
                            var icon = Model.StatusIcons.GetValueOrDefault(status, "");
                            var cssClass = Model.StatusClasses.GetValueOrDefault(status, "");
                            <td class="status-cell"
                                data-user="@Model.CurrentUserSchedule.Id"
                                data-day="@DateTime.Parse(day).ToString("yyyy-MM-dd")"
                                onclick="openPopup(this)">
                                <span class="status @cssClass">@icon</span>
                            </td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="table-wrapper">
            <h2>Team</h2>
            <table>
                <thead>
                    <tr>
                        <th>Dipendente</th>
                        @foreach (var day in Model.DaysInMonth)
                        {
                            <th>@DateTime.Parse(day).ToString("dd/MM")</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>@user.Name</td>
                            @foreach (var day in Model.DaysInMonth)
                            {
                                var status = user.Schedule.ContainsKey(day) ? user.Schedule[day] : "";
                                var icon = Model.StatusIcons.GetValueOrDefault(status, "");
                                var cssClass = Model.StatusClasses.GetValueOrDefault(status, "");
                                <td class="status-cell"
                                    data-user="@Model.CurrentUserSchedule.Id"
                                    data-day="@DateTime.Parse(day).ToString("yyyy-MM-dd")">
                                    <span class="status @cssClass">@icon</span>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="legenda">
            <div class="intera">‚óè Giornata intera</div>
            <div class="mezza">‚óê Mezza giornata</div>
            <div class="smartworking">üè† Smart Working</div>
            <div class="assente">‚úñ Assente</div>
        </div>
    </div>
</div>

<div id="popup">
    <label>Data e ora inizio:</label>
    <input type="datetime-local" id="startDateTime" />

    <label>Data e ora fine:</label>
    <input type="datetime-local" id="endDateTime" />

    <label>Tipo evento:</label>
    <select id="eventType">
        <option value="">-- Scegli --</option>
        <option value="intera">Giornata intera</option>
        <option value="mezza">Mezza giornata</option>
        <option value="assente">Assente</option>
        <option value="smartworking">Smart Working</option>
    </select>

    <div style="text-align: right; margin-top: 12px;">
        <button class="save" onclick="saveStatus()" disabled id="saveBtn">Salva</button>
        <button class="delete" onclick="deleteStatus()">Elimina</button>
        <button class="cancel" onclick="closePopup()">Annulla</button>
    </div>
</div>

@section Scripts {
<script>
    let currentUserId = null;
    let currentDay = null;
    const popup = document.getElementById('popup');

    function openPopup(cell) {
        document.querySelectorAll('.status-cell').forEach(c => c.classList.remove('selected-cell'));
        cell.classList.add('selected-cell');
        currentUserId = cell.getAttribute('data-user');
        currentDay = cell.getAttribute('data-day');

        const rect = cell.getBoundingClientRect();
        popup.style.top = (window.scrollY + rect.bottom + 5) + 'px';
        popup.style.left = (window.scrollX + rect.left) + 'px';

        const dayISO = currentDay;
        const defaultStart = dayISO + 'T09:00';
        const defaultEnd = dayISO + 'T17:00';

        document.getElementById('startDateTime').value = defaultStart;
        document.getElementById('endDateTime').value = defaultEnd;
        document.getElementById('eventType').value = '';

        updateTimeFields();

        popup.style.display = 'block';
    }

    function updateTimeFields() {
        const startInput = document.getElementById('startDateTime');
        const endInput = document.getElementById('endDateTime');

        const startDate = startInput.value.substring(0, 10);
        const endDate = endInput.value.substring(0, 10);

        if (startDate === endDate) {
            startInput.disabled = false;
            endInput.disabled = false;
        } else {
            startInput.disabled = false;
            endInput.disabled = false;

            const newStart = startDate + 'T09:00';
            const newEnd = endDate + 'T17:00';
            startInput.value = newStart;
            endInput.value = newEnd;

            startInput.addEventListener('input', fixStartTimeIfDateDiffers);
            endInput.addEventListener('input', fixEndTimeIfDateDiffers);
        }
    }

    function fixStartTimeIfDateDiffers() {
        const startInput = document.getElementById('startDateTime');
        const endInput = document.getElementById('endDateTime');
        const startDate = startInput.value.substring(0, 10);
        const endDate = endInput.value.substring(0, 10);

        if (startDate !== endDate) {
            startInput.value = startDate + 'T09:00';
        }
    }

    function fixEndTimeIfDateDiffers() {
        const startInput = document.getElementById('startDateTime');
        const endInput = document.getElementById('endDateTime');
        const startDate = startInput.value.substring(0, 10);
        const endDate = endInput.value.substring(0, 10);

        if (startDate !== endDate) {
            endInput.value = endDate + 'T17:00';
        }
    }

    document.getElementById('startDateTime').addEventListener('change', updateTimeFields);
    document.getElementById('endDateTime').addEventListener('change', updateTimeFields);

    const eventTypeSelect = document.getElementById('eventType');
    const saveButton = document.getElementById('saveBtn');

    eventTypeSelect.addEventListener('change', function() {
        if (eventTypeSelect.value === '') {
            saveButton.disabled = true;
        } else {
            saveButton.disabled = false;
        }
    });
    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape') closePopup();
    });

    function closePopup() {
        popup.style.display = 'none';
        document.querySelectorAll('.status-cell').forEach(c => c.classList.remove('selected-cell'));
        popup.style.display = 'none';
        currentUserId = null;
        currentDay = null;
    }

    async function saveStatus() {
    const start = document.getElementById('startDateTime').value;
    const end = document.getElementById('endDateTime').value;
    const type = document.getElementById('eventType').value;

    if (!start || !end || !type) {
        alert('Compila tutti i campi prima di salvare.');
        return;
    }

    if (new Date(start) > new Date(end)) {
        alert('La data/ora di inizio deve essere precedente a quella di fine.');
        return;
    }

    try {
        const response = await fetch('/Example/Dashboard/SaveAbsenceEvent', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: JSON.stringify({
                StartEventDate: start,
                EndEventDate: end,
                EventType: type
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            alert('Errore durante il salvataggio: ' + errorText);
            return;
        }

        const result = await response.json();
        alert(result.message);

        closePopup();

        window.location.reload();

    } catch (error) {
        alert('Errore di rete o server: ' + error.message);
    }
}

    function deleteStatus() {
        alert(`Elimina evento per utente ${currentUserId}, giorno ${currentDay}`);
        closePopup();
    }

    document.addEventListener('click', function(event) {
        if (!popup.contains(event.target) && !event.target.classList.contains('status') && !event.target.closest('.status-cell')) {
            closePopup();
        }
    });
    document.addEventListener('DOMContentLoaded', () => {
        const events = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Events));
        const statusIcons = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.StatusIcons));
        const statusClasses = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.StatusClasses));

        events.forEach(event => {
            const userId = event.UserId;
            const start = new Date(event.StartEventDate);
            const end = new Date(event.EndEventDate);
            const eventType = event.EventType;

            for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
                const dayStr = d.toISOString().substring(0,10);
                const cell = document.querySelector(`td.status-cell[data-user='${userId}'][data-day='${dayStr}']`);
                if (cell) {
                    const icon = statusIcons[eventType] || '';
                    const cssClass = statusClasses[eventType] || '';
                    cell.innerHTML = `<span class="status ${cssClass}">${icon}</span>`;
                }
            }
        });
    });
</script>
}
